
 select 
 DATE_FORMAT(from_unixtime(unix_timestamp(check_date) - unix_timestamp(check_date) mod " + modValue + "),\"%Y.%m.%d %H:%i\") as timeline,  
 count(result_number) as kvo,min(result_number) as min_value, max(result_number) as max_value, monitor_number, object_guid
 from monitor_results 
 where  
check_date >='" + cDateBegin.format(formatter)+ "' and check_date <= '" + cDateEnd.format(formatter) 
    and monitor_number=" + monitorNumber + " and object_guid='" + guidObject + "' "
group by timeline , monitor_number,object_guid \n";
order by timeline 



select 
 DATE_FORMAT(from_unixtime(unix_timestamp(check_date) - unix_timestamp(check_date) MOD 30000),"%Y.%m.%d %H:%i") as timeline,  
 count(result_number) as kvo,min(result_number) as min_value, max(result_number) as max_value, monitor_number, object_guid
 from monitor_results 
 where  
check_date >='!START_DATE!' and check_date <= '!FINISH_DATE!'
    and monitor_number=!MONITOR_NUMBER! and object_guid='!OBJECT_GUID!' 
group by timeline , monitor_number,object_guid 
order by timeline 
















SELECT s2.*,b.result_number AS new_result_number,
c.value_limit AS new_value_limit
 FROM
(
SELECT a.guid, a.object_guid, a.monitor_number,a.details, a.result_number AS old_result_number,
a.value_limit AS old_valuse_limit,a.created,a.last_check_date AS old_last_check_date,
s1.last_check_date AS new_last_check_date
 from `problems` a
LEFT JOIN 
(
	SELECT s0.* FROM (
		SELECT object_guid,monitor_number,MAX(check_date) AS last_check_date from monitor_results 
		WHERE DATE(check_date) > (NOW() - INTERVAL 1 MONTH)
		GROUP BY object_guid,monitor_number 
	) AS s0
) AS s1
ON a.object_guid = s1.object_guid AND a.monitor_number = s1.monitor_number
) AS s2
LEFT JOIN monitor_results b ON s2.object_guid = b.object_guid AND s2.monitor_number = b.monitor_number AND s2.new_last_check_date=b.check_date
LEFT JOIN monitor_links c ON s2.object_guid = c.object_guid AND s2.monitor_number = c.monitor_number





RP sap hana
SELECT * FROM graph_objects WHERE guid = 'd874bbc4-127f-4838-bac7-5b47e0b74f64' - Графический ГУИД
f8f1d271-ecca-4fd3-80e9-e977d58aa29e - физический

mlk-srp-di12
f7a092d6-f3b4-449d-b692-e95628cf5176 - graph
a3f3c597-d1a3-4a60-b5af-3110486a4ad0 -phys

SMP - application
6067ac5f-2b6b-40e2-bb28-ab9e5a4fa9a8

SELECT a.*,
CASE
WHEN a.obj_typ = 'servers' THEN b.def_ip
WHEN a.obj_typ = 'db_systems' THEN c.def_ip
WHEN a.obj_typ = 'app_systems' THEN d.def_ip
END AS ip,
CASE
WHEN a.obj_typ = 'servers' THEN ''
WHEN a.obj_typ = 'db_systems' THEN c.sid
WHEN a.obj_typ = 'app_systems' THEN d.sid
END AS sid,
CASE
WHEN a.obj_typ = 'servers' THEN ''
WHEN a.obj_typ = 'db_systems' THEN c.port
WHEN a.obj_typ = 'app_systems' THEN d.port
END AS port,


c.db_type,
d.def_ip, d.sid
 FROM v_objects_all a
 LEFT JOIN servers b ON a.guid=b.guid
 LEFT JOIN db_systems c ON a.guid=c.guid
 LEFT JOIN app_systems d ON a.guid=d.guid
 WHERE a.guid IN ('f8f1d271-ecca-4fd3-80e9-e977d58aa29e','a3f3c597-d1a3-4a60-b5af-3110486a4ad0','6067ac5f-2b6b-40e2-bb28-ab9e5a4fa9a8')
 
 
 


 		out += "var resp = '[ { \"id\": 456, \"full_name\": \"GOOBER ANGELA\"}, { \"id\": 123, \"full_name\": \"BOB STEVE\" } ]'; \n";
		out += "console.log('1 resp', resp);  \n";


		out += "var objJSON = JSON.parse(resp);  \n";
		out += "for (var i = 0; i < objJSON.length; ++i) {  \n";
		out += "var student = objJSON[i];  \n";
     
		out += "console.log(student.id + ' ' + student.full_name);  \n";
	 
		out += "}  \n";



INSERT INTO `monitor_links` (`id`, `object_guid`, `monitor_number`, `slot`, `active`, `value_limit`) VALUES (106, 'a3f3c597-d1a3-4a60-b5af-3110486a4ad0', 101, 1, 'X', 90);
INSERT INTO `monitor_links` (`id`, `object_guid`, `monitor_number`, `slot`, `active`, `value_limit`) VALUES (94, 'a3f3c597-d1a3-4a60-b5af-3110486a4ad0', 102, 1, 'X', 90);
INSERT INTO `monitor_links` (`id`, `object_guid`, `monitor_number`, `slot`, `active`, `value_limit`) VALUES (100, 'a3f3c597-d1a3-4a60-b5af-3110486a4ad0', 106, 1, 'X', 90);










������������������ ������

GreenexSrv2Main->start()
		webSrv = new WebUIService(srv.gData);
		srv.gData.service.execute(webSrv);

WebUIService->run()
			NeServer srv= new NeServer(gData);
			srv.activate();

NeServer extends Thread->activate()
			new NeServer(sslSocket, gData)).start()

		NeServer->run()

			BufferedReader in
			
			while ((s = in.readLine()) != null)

			routeResponse(this.socket, parts[1], this.gData);


			NeServer->routeResponse(SSLSocket socket, String requestString, globalData gData)

			String handlerClassName = gData.router.get(parseHandlerName(requestString));  - ��� ��������������� ������ ����������� �� gData.router
			
			
			
			
			
��������:

		router.put("/landscape", pack + "LandscapeHandler");
		router.put("/system_image", pack + "SystemImageHandler");



		router.put("/schedule", pack + "RootPageHandler");
		router.put("/jobs", pack + "RootPageHandler");
		router.put("/server_list", pack + "RootPageHandler");
		router.put("/db_list", pack + "RootPageHandler");		
		router.put("/app_list", pack + "RootPageHandler");		
		router.put("/check_result_list", pack + "RootPageHandler");			
��������� �������: 
	������� - graph_objects	
	
	
	
Вставка групп в MySQL

	
	SET @page := 'e84ec9a8-4c1b-4896-a54d-a9ae6380a428';

SET @dc1 := '42cd46c7-c732-496f-a4f2-1b2287fdc9c3';
SET @dc2 := '60d0abf6-aeba-4927-b601-57d11d040e70';

INSERT INTO `graph_objects` (`page`, `guid`, `class`, `subclass`, `label`, `show_label`, `objGuid`, `bgcolor`, `borderColor`, `lineWidth`, `left`, `top`, `width`, `height`, `link`, `level`) 
VALUES (@page, @dc1, 'group', '', 'ЦОД-М', 'X', '', '#EEEEEE', '#111111', 0, 26, 63, 420, 570, '', -20);
INSERT INTO `graph_objects` (`page`, `guid`, `class`, `subclass`, `label`, `show_label`, `objGuid`, `bgcolor`, `borderColor`, `lineWidth`, `left`, `top`, `width`, `height`, `link`, `level`) 
VALUES (@page, @dc2, 'group', '', 'ЦОД-Р', 'X', '', '#EEEEEE', '#111111', 0, 498, 63, 420, 570, '', -20);





/*
	protected String buildContextMenu() {
		String out = "";
		String function = "";

///        page context show  //////////		
		out += "<div class='menu' id='context_page_menu_show'>  \n";

		function = "onSwitchToEditMode";
		out += "<div id='menu_" + function + "' class='menu-item' onclick=\"" + function + "();\">"
				+ gData.tr("Switch to EDIT mode") + "</div>  \n";
		out += "</div>  \n";

///        page context menu  //////////		
		out += "<div class='menu' id='context_page_menu_edit'>  \n";

		function = "onAddNewServer";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('blade');\">" + gData.tr("Add blade server")
				+ "</div>  \n";

		function = "onAddNewServer";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('mainframe');\">" + gData.tr("Add Mainframe server")
				+ "</div>  \n";

		function = "onAddNewGroup";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('group');\">" + gData.tr("Add group") + "</div>  \n";

		function = "onAddNewSapHanaDB";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('sapHanaDb');\">" + gData.tr("Add SAP Db")
				+ "</div>  \n";

		function = "onAddNewOracleDB";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('oracleDb');\">" + gData.tr("Add Oracle Db")
				+ "</div>  \n";

		function = "onAddNewApp";
		out += "<div class='menu-item' onclick=\"AddNewGraphObject('app');\">" + gData.tr("Add App server")
				+ "</div>  \n";

		function = "onSaveAll";
		out += "<div id='menu_" + function + "' class='menu-item' onclick=\"" + function + "();\">" + gData.tr("Save")
				+ "</div>  \n";

		out += "</div>  \n";

///////     element context menu /////////////

		out += "<div class='menu'  id='context_menu_div'>  \n";

		function = "onDeleteDiv";
		out += "<div id='menu_" + function + "' class='menu-item' onclick=\"" + function + "();\">" + gData.tr("Delete")
				+ "</div>  \n";

		function = "onShowProperties";
		out += "<div id='menu_" + function + "' class='menu-item' onclick=\"" + function + "();\">"
				+ gData.tr("Properties") + "</div>  \n";

		function = "onReleaseDiv";
		out += "<div id='menu_" + function + "' class='menu-item' onclick=\"" + function + "();\">"
				+ gData.tr("Release") + "</div>  \n";

		out += "</div>  \n";

		out += "<div id='properties' class='properties_class' > \n";
		out += " <div style='float: right;' class='close_button' onclick='onClosePropertiesBox();'>X</div>\n";

		out += " <label id='prop_caption'>Edit:</label><br> \n";
		out += "<hr> \n";

		out += " <label for='prop_label'>" + gData.tr("Label") + "&nbsp;" + "</label> \n";
		out += " <input type='text' id='prop_label' size='7'> \n";

		out += " <label for='prop_height'>" + gData.tr("Height") + "</label> \n";
		out += " <input type='number' id='prop_height' name='height' min='0' max='10000'> \n";

		out += " <label for='prop_width'>" + gData.tr("Width") + "&nbsp;" + "</label> \n";
		out += " <input type='number' id='prop_width' name='width' min='0' max='10000'> \n";
		out += "<hr> \n";
		out += " <input style='float: right;' type='button' value=' " + gData.tr("Change") + "' \n";
		out += " onclick='onChangePropertiesInForm(this);'> \n";

		out += "</div>  \n";

		return out;
	}
*/
/*
	protected String buildFunctionsForContextMenu() {
		String out = "";

		out += "\n<script>  \n";

		out += "var currentElement = null;  \n";

		out += "function onReleaseDiv(){ \n";

		out += " window.selectedElement.removeEventListener('mousedown', mouseDownSelectedElement);  \n";
		out += " window.selectedElement.removeEventListener('mousemove', onMouseMove);  \n";
		out += " window.selectedElement.style.zIndex = window.curzIndex;  \n";
		out += " window.selectedElement.style.boxShadow = null;  \n";
		out += "} \n";

		out += "function onAddNewServer(){ \n";

		out += " alert('onAddNewServer ');  \n";
		out += "} \n";

		out += "function onDeleteServer(){ \n";
		out += " alert('onDeleteServer ');  \n";
		out += "} \n";

		out += "function setCurrentId(obj){	 \n";
		out += "window.selectedElement = obj; \n";
		out += "console.log(obj.id); \n";
		out += "} \n";

		out += "function resetCurrentId(){ \n";
		out += "window.selectedElement = null; \n";
		out += "}; \n";

//********** vvv  onSaveAll vvv *************************

		out += "function onSaveAll(){	 \n";

		out += "var strJSObj = ''; \n";
		out += "var grObj = null; \n";

		out += "for (var i = 0, len = window.graphObj.length; i < len; i++) { \n";

		out += "grObj = window.graphObj[i]; \n";

		out += "strJSObj += 'guid::' + grObj.guid + ';;'; \n";
		out += "strJSObj += 'class::' + grObj.class + ';;'; \n";
		out += "strJSObj += 'subclass::' + grObj.subclass + ';;'; \n";
		out += "strJSObj += 'label::' + grObj.label + ';;'; \n";
		out += "strJSObj += 'bgcolor::' + grObj.bgcolor + ';;'; \n";
		out += "strJSObj += 'borderColor::' + grObj.borderColor + ';;'; \n";
		out += "strJSObj += 'level::' + grObj.level + ';;'; \n";
		out += "strJSObj += 'link::' + grObj.link + ';;'; \n";

		out += "var rect = document.getElementById(grObj.guid).getBoundingClientRect(); \n";

		out += "strJSObj += 'top::' + rect.top + ';;'; \n";
		out += "strJSObj += 'left::' + rect.left + ';;'; \n";
		out += "strJSObj += 'width::' + grObj.width + ';;'; \n";
		out += "strJSObj += 'height::' + grObj.height + ';;'; \n";

		out += "strJSObj += '!!'; \n";

		out += "} \n";

		out += "sendRequest('/gr_page_save?page=' + window.pageGuid, strJSObj); \n";

		out += "} \n";

//********** ^^^  onSaveAll ^^^ *************************

		out += "</script>  \n";

		return out;
	}
*/

/*
	protected String buildJSLayout() {
		String out = "";
		out += "<script>  \n";

		out += "function refreshAll(){ \n";
		out += " getObjectsList(); \n";
		out += " buildLayoutGroups(); \n";
		out += " buildLayoutHardAndSoft(); \n";
		out += " addListenEventsOnDiv(); \n";

		out += "document.addEventListener('contextmenu', onContextMenuPage, false); \n";
		out += "document.addEventListener('click', onClickDocument, false); \n";

		out += "}	\n";

		out += "function getObjectsList(){ \n";
		out += "window.graphObj = [ \n";

		for (GraphJsObject o : jsObjects) {

			out += "{ ";
			out += "'guid':'" + o.guid + "',";
			out += "'class':'" + o.Class + "',";
			out += "'subclass':'" + o.subClass + "',";
			out += "'label':'" + o.label + "',";
			out += "'show_label':'" + o.show_label + "',";
			out += "'bgcolor':'" + o.bgcolor + "',";
			out += "'borderColor':'" + o.borderColor + "',";
			out += "'left':'" + o.left + "',";
			out += "'top':'" + o.top + "',";
			out += "'width':'" + o.width + "',";
			out += "'height':'" + o.height + "',";
			out += "'level':'" + o.level + "',";
			out += "'link':'" + o.link + "'";
			out += "}, \n";
		}

		out = out.substring(0, out.length() - 1);

		out += "];	\n";
		out += "}	\n";

		out += "function buildLayoutHardAndSoft(){ \n";

		out += "removeElementsByClass(\"server\"); \n";
		out += "removeElementsByClass(\"db_system\"); \n";
		out += "removeElementsByClass(\"app_system\"); \n";

		out += "for (var i = 0, len = window.graphObj.length; i < len; i++) {  \n";

		out += "if (window.graphObj[i].class == 'server' ||   \n";
		out += "window.graphObj[i].class == 'app_system' ||   \n";
		out += "window.graphObj[i].class == 'db_system') {   \n";

		out += "var newEl = document.createElement('div');  \n";

		out += "newEl.id = window.graphObj[i].guid;   \n";

		out += "newEl.className = window.graphObj[i].class + ' ' + graphObj[i].subclass;  \n";
		out += "newEl.innerHTML = window.graphObj[i].label;  \n";
		out += "newEl.style.position = 'absolute';  \n";
		out += "newEl.style.left = window.graphObj[i].left + 'px';  \n";
		out += "newEl.style.top = window.graphObj[i].top + 'px'; \n";
		out += "newEl.style.zIndex = window.graphObj[i].level; \n";
		out += "var imagePath = '/img/' + window.graphObj[i].subclass + '.png'; \n";
		out += "newEl.style.backgroundImage = \"url('\" + imagePath + \"')\"; \n";
		out += "newEl.style.backgroundRepeat = 'no-repeat'; \n";
		out += "document.body.appendChild(newEl); \n";
		out += "		}	\n";
		out += "	}	\n";
		out += "}	\n";

		out += "function buildLayoutGroups(){ \n";

		out += "removeElementsByClass(\"group\"); \n";

		out += "for (var i = 0, len = window.graphObj.length; i < len; i++) {  \n";

		out += "if (graphObj[i].class == 'group') {   \n";

		out += "var newEl = document.createElement('div');  \n";

		out += "newEl.id = graphObj[i].guid;   \n";
		out += "newEl.className = graphObj[i].class ;  \n";
		out += "newEl.innerHTML = graphObj[i].label;  \n";
		out += "newEl.style.position = 'absolute';  \n";
		out += "newEl.style.left = graphObj[i].left + 'px';  \n";
		out += "newEl.style.top = graphObj[i].top + 'px'; \n";
		out += "newEl.style.width = graphObj[i].width + 'px'; \n";
		out += "newEl.style.height = graphObj[i].height + 'px'; \n";
		out += "newEl.style.zIndex = graphObj[i].level; \n";
		out += "newEl.style.background = graphObj[i].bgcolor; \n";
		out += "document.body.appendChild(newEl); \n";

		out += "		}	\n";
		out += "	}	\n";
		out += "}	\n";

		out += "function addListenEventsOnDiv(){ \n";

		out += "for (var i = 0, len = window.graphObj.length; i < len; i++) {  \n";

		out += "if ( window.graphObj[i].class == 'server' ||   \n";
		out += " window.graphObj[i].class == 'group' ||   \n";
		out += " window.graphObj[i].class == 'app_system' ||   \n";
		out += " window.graphObj[i].class == 'db_system') {   \n";

		out += "var newEl = document.getElementById(window.graphObj[i].guid);  \n";

		out += "newEl.addEventListener('dblclick', onDblClickSelectedElement); \n";
		out += "newEl.addEventListener('mouseover', onMouseOverElement); \n";
		out += "newEl.addEventListener('contextmenu', onContextMenuDev, false); \n";
		out += "newEl.ondragstart = function() {  \n";
		out += "	return false;  \n";
		out += "};  \n";

		out += "  }	\n";
		out += " }	\n";
		out += "}	\n";

		out += "function removeElementsByClass(className){ \n";
		out += "var elements = document.getElementsByClassName(className); \n";
		out += "while(elements.length > 0){ \n";
		out += "elements[0].parentNode.removeChild(elements[0]); \n";
		out += "} \n";
		out += "} \n";

		out += "</script>  \n";
		return out;
	}
*/
/*
	protected String jsFunctions() {
		String out = "";
		out += "<script>  \n";

		out += "function onMouseMove(event) {  \n";

		out += "     event.target.style.left = ( event.pageX - 30 ) + 'px';  \n";
		out += "     event.target.style.top = ( event.pageY - 20 ) + 'px';  \n";

		out += "}  \n";

		out += "function mouseDownSelectedElement(event) { \n";

		out += " event.target.style.position = 'absolute';  \n";
		out += " event.target.style.zIndex = 500;  \n";

		out += " document.body.append(event.target);  \n";

		out += "  event.target.addEventListener('mousemove', onMouseMove);   \n";
		out += "} \n";

		out += "function onMouseOverElement(event) { \n";
		out += " window.mouseoverElement = event.target; \n";
		out += "} \n";

		out += "function onDblClickSelectedElement(event) { \n";

		out += "if (window.mode === 'SHOW') return; \n";

		out += "console.log('onDblClickSelectedElement') \n";

		out += "	if (window.selectedElement) { \n";
		out += "		 window.selectedElement = null; \n";

		out += " 		 window.selectedElement.style.boxShadow = null; \n";
		out += "		 window.selectedElement.style.zIndex = window.curzIndex;  \n";

		out += "	}   \n";

		out += "  event.target.style.boxShadow = '0 0 5px #999999';   \n";
		out += "  window.selectedElement = event.target;   \n";
		out += "  window.curzIndex =  event.target.style.zIndex;  \n";
		out += "  event.target.addEventListener('mousedown', mouseDownSelectedElement);   \n";
		out += "  event.target.addEventListener('dblclick', onDblClickSelectedElement);  \n";

		out += "} \n";

		out += "function onContextMenuDev(event) { \n";
		out += "if (window.mode === 'SHOW') return; \n";

		out += " window.mouseLeft = event.clientX + 'px';	 \n";
		out += " window.mouseTop = event.clientY + 'px';	 \n";

		out += " contextMenuBox = window.document.getElementById('context_menu_div');  \n";
		out += " contextMenuBox.style.left = event.clientX + 'px';	 \n";
		out += " contextMenuBox.style.top = event.clientY  + 'px';		 \n";
		out += " contextMenuBox.style.display = 'block';	 \n";

		out += "    event.preventDefault();   \n";
		out += "    event.stopPropagation();   \n";
		out += "} \n";

		out += "function onContextMenuPage(event) { \n";

		out += "if (document.addEventListener) { \n";

		out += "	if (window.mode=='SHOW') { \n";
		out += " 	contextMenuBoxPage = window.document.getElementById('context_page_menu_show');  \n";
		out += "	} else { \n";
		out += " 	contextMenuBoxPage = window.document.getElementById('context_page_menu_edit');  \n";
		out += "	} ; \n";

		out += " contextMenuBoxPage.style.left = event.clientX + 'px';	 \n";
		out += " contextMenuBoxPage.style.top = event.clientY  + 'px';		 \n";
		out += " contextMenuBoxPage.style.display = 'block';	 \n";
		out += "    event.preventDefault();   \n";
		out += "} else {    \n";
		out += "document.attachEvent('oncontextmenu', function() {    \n";
		out += "	window.event.returnValue = false;    \n";
		out += "});    \n";
		out += "} \n";

		out += "} \n";

		out += "function onClickDocument(event) { \n";

		out += " contextMenuBox = document.getElementById('context_menu_div'); \n";
		out += " if (contextMenuBox) { \n";
		out += "	if (contextMenuBox.style.display === 'block') { \n";
		out += " 	contextMenuBox.style.display = 'none'; \n";
		out += "	} \n";
		out += " } \n";

		out += " contextMenuBox = document.getElementById('context_page_menu_edit'); \n";
		out += " if (contextMenuBox) { \n";
		out += "	if (contextMenuBox.style.display === 'block') { \n";
		out += " 	contextMenuBox.style.display = 'none'; \n";
		out += "	} \n";
		out += " } \n";

		out += " contextMenuBox = document.getElementById('context_page_menu_show'); \n";
		out += " if (contextMenuBox) { \n";
		out += "	if (contextMenuBox.style.display === 'block') { \n";
		out += " 	contextMenuBox.style.display = 'none'; \n";
		out += "	} \n";
		out += " } \n";

		out += "} \n";

		out += "function onChangePropertiesInForm(obj) { \n";
		out += "console.log('onChangePropertiesInForm' + obj.id); \n";

		out += "for (var i = 0, len = window.graphObj.length; i < len; i++) {  \n";
		out += " if (window.graphObj[i].guid===window.mouseoverElement.id) { \n";
		out += " window.graphObj[i].label = document.getElementById('prop_label').value;	  \n";
		out += " window.graphObj[i].height = document.getElementById('prop_height').value;	  \n";
		out += " window.graphObj[i].width = document.getElementById('prop_width').value;	  \n";

		out += " 	} \n";
		out += " } \n";

//		out += "item.height = document.getElementById('prop_height').value;	  \n";	
//		out += "item.width = document.getElementById('prop_width').value;	  \n";

		out += " box = document.getElementById('properties'); \n";
		out += " if (box) { \n";
		out += "	if (box.style.display === 'block') { \n";
		out += " 	box.style.display = 'none'; \n";
		out += "	} \n";
		out += " } \n";

		out += "} \n";

		out += "function onSwitchToEditMode() { \n";
		out += "	window.mode =  'EDIT';  \n";
		out += "} \n";

		out += "function onDeleteDiv() { \n";
		out += "	console.log('Delete Div');  \n";
		out += "} \n";

		out += "function onClosePropertiesBox() { \n";
		out += "	 box = document.getElementById('properties');	  \n";
		out += " if (box) { \n";
		out += " 	 box.style.left = window.mouseLeft; \n";
		out += " 	 box.style.top = window.mouseTop; \n";
		out += " 	 box.style.display = 'none'; \n";
		out += "	} \n";
		out += "} \n";

		out += "function onProperties() { \n";

		out += "var item = window.graphObj.find(item => item.guid === window.mouseoverElement.id); \n";
		out += "	 box = document.getElementById('properties');	  \n";
		out += " if (box) { \n";
		out += " 	 box.style.left = window.mouseLeft; \n";
		out += " 	 box.style.top = window.mouseTop; \n";
		out += " 	 box.style.display = 'block'; \n";
		out += "	 document.getElementById('prop_caption').innerHTML= '" + gData.tr("Properties for:")
				+ " <b>' + item.label + '</b>'; \n";
		out += "	 document.getElementById('prop_label').value= item.label;	  \n";
		out += "	 document.getElementById('prop_height').value= item.height;	  \n";
		out += "	 document.getElementById('prop_width').value= item.width;	  \n";

		out += " } \n";

		out += "} \n";

		out += "function AddNewGraphObject(typeObj) { \n";

		out += "var newSingleObj = []; \n";
		out += "newSingleObj.push({'key':'guid','value':'AAA'}); \n";
		out += "newSingleObj.push({'key':'class','value':'group'}); \n";
		out += "newSingleObj.push({'key':'subclass','value':'S'}); \n";

		out += "console.log('AddNewGraphObject=' + typeObj);\n";

		out += "for (var i = 0, len = newSingleObj.length; i < len; i++) {  \n";
		out += "console.log(newSingleObj[i].key + ' ' + newSingleObj[i].value);\n";
		out += "} \n";


		out += "function postRequest(url, text, callback) { \n";

		out += "var xhr = new XMLHttpRequest(); \n";
		out += "xhr.open('POST', url, true); \n";
		out += "xhr.responseType = 'text' \n";
		out += "xhr.onload = function(e) {  \n";
		out += " if (this.status == 200) { \n";
		out += "     console.log(this.responseText); \n";
		out += " if(callback) callback(statuses); \n";
		out += "  }	\n";
		out += " };	 \n";

		out += " xhr.send(text);  \n";

		out += "} \n";

		out += "function getRequest(url, callback) { \n";

		out += "var xhr = new XMLHttpRequest(); \n";
		out += "xhr.open('GET', url); \n";
		out += "xhr.send();  \n";

		out += "xhr.onreadystatechange = function() {  \n";
		out += " if (this.readyState == 4 && this.status == 200) { \n";
		out += "   var response = this.responseText; \n";
		out += " if(callback) callback(response); \n";
		out += "  }	\n";
		out += " };	 \n";



		out += "} \n";
		out += "</script>  \n";
		return out;
	}
*/

			